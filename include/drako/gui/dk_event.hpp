#ifndef DRAKO_GUI_EVENTS_HPP
#define DRAKO_GUI_EVENTS_HPP

#include "math/dk_vector.hpp"

namespace drako::gui
{
    /// <summary>Identifies the type of gui event.</summary>
    enum class MouseEventCode
    {
        LEFT_BUTTON_DOWN,       // Mouse left button pressed
        LEFT_BUTTON_UP,         // Mouse left button released
        LEFT_BUTTON_DBCLK,      // Mouse left button double click
        RIGHT_BUTTON_DOWN,      // Mouse right button pressed
        RIGHT_BUTTON_UP,        // Mouse right button released
        RIGHT_BUTTON_DBCLK,     // Mouse right button double click
        MIDDLE_BUTTON_DOWN,     // Mouse middle button pressed
        MIDDLE_BUTTON_UP,       // Mouse middle button released
        MIDDLE_BUTTON_DBCLK,    // Mouse middle button double click
        WHEEL_SCROLL,           // Mouse wheel rotation
        IDLE_HOVER,             // Mouse hovering for a certain time amount
    };

    /// <summary>Provides information about an event generated by the mouse device.</summary>
    struct MouseEventInfo
    {
        MouseEventCode eventCode;
        math::vec2f mousePosition;
    };

    template <typename TKey, typename ...TArgs>
    class EventDispatcher final
    {
        using DelegateSignature = void(*)(TArgs...);

    public:

        explicit EventDispatcher(const size_t reserved_size);
        ~EventDispatcher() noexcept = default;

        void insert_listener(const TKey key, const DelegateSignature pDelegate);

        void remove_listener(const TKey key) noexcept;

        void invoke(TArgs... args) const;

    private:

        drako::ecs::Table<TKey, DelegateSignature> _listeners;
    };

    template <typename TKey, typename ...TArgs>
    inline EventDispatcher<TKey, TArgs...>::EventDispatcher(const size_t reserved_size) {}

    template<typename TKey, typename ...TArgs>
    inline void EventDispatcher<TKey, TArgs...>::insert_listener(const TKey key, const EventDispatcher::DelegateSignature pDelegate)
    {
        _listeners.insert(key, pDelegate);
    }

    template <typename TKey, typename ...TArgs>
    inline void EventDispatcher<TKey, TArgs...>::remove_listener(const TKey key) noexcept
    {
        _listeners.remove(key);
    }

    template<typename TKey, typename ...TArgs>
    inline void EventDispatcher<TKey, TArgs...>::invoke(TArgs ...args) const
    {
        for (int i = 0; i < _listeners.size(); i++)
        {
            _listeners.get_value()(...args);
        }
    }
}

#endif // !DRAKO_GUI_EVENTS_HPP

